@page "/mychat/{chatId}"
@using Blazored.LocalStorage;
@using IdentityBlazor.Models;
@using Microsoft.AspNetCore.SignalR.Client;
@inject HttpClient Http
@inject ILocalStorageService _storage
@inject NavigationManager Navigation

<html>
    <body>

    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
    <div class="">
        <div class="row">
            <div class="col-md-4" style="background-color:gainsboro">
                <div class=" row border-bottom padding-sm" style="height: 40px;">
                    My Chats
                </div>

                <!-- =============================================================== -->
                <!-- member list <small class="chat-alert text-muted"><i class="fa fa-reply"></i></small> -->
                <ul class="friend-list">
                    @{
                        if (chats != null)
                        {
                            foreach (var chatModel in chats)
                            {
                                <li>
                                    <a href="/mychat/@chatModel.Id" class="clearfix">
                                        <img src="https://bootdey.com/img/Content/user_2.jpg" alt="" class="img-circle">
                                        <div class="friend-name">
                                            <strong>@chatModel.Name</strong>
                                        </div>
                                        <div class="last-message text-muted">@chatModel.Messages[chatModel.Messages.Count - 1].Text</div>
                                        <small class="time text-muted">@chatModel.Messages[chatModel.Messages.Count - 1].Date.ToString("t")</small>
                                        <small class="chat-alert text-muted"><i class="fa fa-check"></i></small>
                                    </a>
                                </li>
                            }
                        }
                    }
                </ul>
            </div>

            <!--=========================================================-->
            <!-- selected chat -->
            <div class="col-md-8" style="background-color:gainsboro">
                <div class="chat-message" style="background-color:white">
                    <ul class="chat">
                        @{
                            if (chat != null)
                            {
                                foreach (var message in chat.Messages)
                                {
                                    if (message.FromUserId == chat.CurrentUserId)
                                    {
                                        <li class="right clearfix">
                                            <span class="chat-img pull-right">
                                                <img src="https://bootdey.com/img/Content/user_1.jpg" alt="User Avatar">
                                            </span>
                                            <div class="chat-body clearfix">
                                                <div class="header">
                                                    <small class="pull-right text-muted"><i class="fa fa-clock-o"></i>@message.Date.ToString("g")</small>
                                                </div>
                                                <h6>
                                                    @message.Text
                                                </h6>
                                            </div>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="left clearfix">
                                            <span class="chat-img pull-left">
                                                <img src="https://bootdey.com/img/Content/user_3.jpg" alt="User Avatar">
                                            </span>
                                            <div class="chat-body clearfix">
                                                <div class="header">
                                                    <strong class="primary-font">@message.FromUserId</strong>
                                                    <small class="pull-right text-muted"><i class="fa fa-clock-o"></i>@message.Date.ToString("g")</small>
                                                </div>
                                                <h5>
                                                    @message.Text
                                                </h5>
                                            </div>
                                        </li>
                                    }
                                }
                            }
                        }
                    </ul>
                </div>
                <div class="chat-box bg-white">
                    <div class="input-group">
                        <input class="form-control border no-shadow no-rounded" @bind-value="messageText" placeholder="Type your message here">
                        <span class="input-group-btn">
                            <button class="btn btn-success no-rounded" type="button" @onclick="(async() => await SendMessage())">Send</button>
                        </span>
                    </div><!-- /input-group -->
                </div>
            </div>
        </div>
    </div>
    </body>
</html>



@code {
    private string messageText { get; set; }

    [Parameter]
    public string? chatId { get; set; }
    private List<ChatModel>? chats = new List<ChatModel>();

    private ChatModel? chat = new ChatModel();
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        chats = await Get2($"api/Chat/chats");
        chat = await Get($"api/Chat/chat?chatid={chatId}");
        
        await ConnectToHub();
    }

    private async Task<ChatModel?> Get(string url)
    {
        var token = await _storage.GetItemAsStringAsync("token");

        var request = new HttpRequestMessage(HttpMethod.Get, url);
        request.Headers.Add("Authorization", $"Bearer {token}");

        var response = await Http.SendAsync(request);

        return await response.Content.ReadFromJsonAsync<ChatModel>();
    }

    private async Task<List<ChatModel>?> Get2(string url)
    {
        var token = await _storage.GetItemAsStringAsync("token");

        var request = new HttpRequestMessage(HttpMethod.Get, url);
        request.Headers.Add("Authorization", $"Bearer {token}");

        var response = await Http.SendAsync(request);

        return await response.Content.ReadFromJsonAsync<List<ChatModel>>();
    }

    private async Task ConnectToHub()
    {
        var token = await _storage.GetItemAsStringAsync("token");

        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7044/hubs/chatuchun?token={token}")
            .Build();

        _hubConnection.On<MessageModel>("NewMessage", model =>
        {
            chat.Messages!.Add(model);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task SendMessage()
    {
        var token = await _storage.GetItemAsStringAsync("token");

        var request = new HttpRequestMessage(HttpMethod.Post, "api/chat/sendmessage");
        request.Headers.Add("Authorization", $"Bearer {token}");
        request.Content = JsonContent.Create(new NewMessageModel()
        {
            Text = messageText,
            ChatId = Guid.Parse(chatId!)
        });

        messageText = "";

        await Http.SendAsync(request);
    }
}